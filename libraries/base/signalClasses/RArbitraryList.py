"""RArbitraryList
.. helpdoc::
The RArbitraryList signal is for arbitrary list objects in R.  This is the second most abstract object in R.  RArbitraryList signals must contain "List" objects as their data elements.  Thus the elements will have the names attribute and be accessible using the $ notation.  RArbitraryLists may have any structure of data under their headings.
"""
## modelList, holds a list of data frames generated by the fold widget

from libraries.base.signalClasses.RVariable import *
from libraries.base.signalClasses.UnstructuredDict import *
from libraries.base.signalClasses.StructuredDict import *
import time
"""
.. convertTo:: `base:RVariable, base:UnstructuredDict`
.. convertFrom:: `base:UnstructuredDict, base:StructuredDict`
"""
class RArbitraryList(RVariable, UnstructuredDict):
    convertFromList = [UnstructuredDict, StructuredDict]
    convertToList = [RVariable, UnstructuredDict]
    def __init__(self, widget, data, parent = None, checkVal = True, **kwargs):
        RVariable.__init__(self, widget = widget, data = data, parent = parent, checkVal = False, **kwargs)
        if checkVal and not self.R('is.list(%s)' % data):
            raise Exception
        self.newDataID = unicode(time.time()).replace('.', '_')
        
    def convertFromClass(self, signal):
        if isinstance(signal, UnstructuredDict):
            return self._convertFromUnstructuredDict(signal)
        elif isinstance(signal, StructuredDict):
            return self._convertFromStructuredDict(signal)
            
    def _convertFromStructuredDict(self, signal):
        newVar = self.assignR('RListConversion_'+self.newDataID, signal.getData())
        return RList(widget = self.widget, data = 'as.list('+newVar+')')
    def _convertFromUnstructuredDict(self, signal):
        newVar = self.assignR('RListConversion_'+self.newDataID, signal.getData())
        return RList(widget = self.widget, data = 'as.list('+newVar+')')
    def convertToClass(self, varClass):
        if varClass == RVariable:
            return self._convertToVariable()
        elif varClass == BaseRedRVariable:
            return self._convertToVariable()
        elif varClass == RArbitraryList:
            return self
        elif varClass == UnstructuredDict:
            return self._convertToUnstructuredDict()
        else:
            raise Exception
    def _convertToUnstructuredDict(self):
        return UnstructuredDict(widget = self.widget, data = self.R(self.getData(), wantType = 'dict'))
    def _convertToVariable(self):
        return self